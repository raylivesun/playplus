(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[     46186,       1069]
NotebookOptionsPosition[     44117,       1027]
NotebookOutlinePosition[     44554,       1044]
CellTagsIndexPosition[     44511,       1041]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{"1", "/", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"2", "*", "i"}], " ", "+", " ", "1"}], ")"}], "^", "2"}]}], ",",
    " ", 
   RowBox[{"{", 
    RowBox[{"i", ",", " ", 
     RowBox[{"-", "Infinity"}], ",", " ", "Infinity"}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->"In[55]:=",ExpressionUUID->"83cc8480-c25d-443a-a4a7-1dbb0fc6600d"],

Cell[BoxData[
 FractionBox[
  SuperscriptBox["\[Pi]", "2"], "4"]], "Output",
 CellChangeTimes->{3.957899447954238*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"a4782ba2-1b9d-497e-a3b4-7ee6d08c2832"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "N, I, P", Typeset`newq$$ = "N, I, P", 
   Typeset`chosen$$ = 
   "{Entity[\"playplus\", \"Nitrogen\"], Entity[\"playplus\", \"Iodine\"], \
Entity[\"playplus\", \"Phosphorus\"]}", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = True}, 
     
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ButtonBox[
            TagBox[
             TooltipBox[
              StyleBox["\"\[RightGuillemet]\"",
               StripOnInput->False,
               LineColor->RGBColor[1, 0.5, 0],
               FrontFaceColor->RGBColor[1, 0.5, 0],
               BackFaceColor->RGBColor[1, 0.5, 0],
               GraphicsColor->RGBColor[1, 0.5, 0],
               FontColor->RGBColor[1, 0.5, 0]],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                "WAStrings", "InterpretationAssumptions"], StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource[
               "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
            Appearance->None,
            BaselinePosition->Baseline,
            ButtonFunction:>(Quiet[
               WolframAlpha[]]; Typeset`open$$ = True; 
             WolframAlphaClient`Private`extrudeFromFastParse["N, I, P", 
               Defer[{
                 Entity["playplus", "Nitrogen"], 
                 Entity["playplus", "Iodine"], 
                 Entity["playplus", "Phosphorus"]}], "Fast parse"]; 
             Typeset`open$$ = False),
            ContentPadding->False,
            Evaluator->Automatic,
            Method->"Queued"], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{11., {3.173828125, 7.826171875}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{11., {3.173828125, 7.826171875}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[Typeset`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse["N, I, P", 
                  Defer[{
                    Entity["playplus", "Nitrogen"], 
                    Entity["playplus", "Iodine"], 
                    Entity["playplus", "Phosphorus"]}], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"{", 
                  RowBox[{
                   TemplateBox[{"\"nitrogen\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Nitrogen\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Nitrogen\\\"]\"", 
                    "\"playplus\""},
                    "Entity"], ",", " ", 
                   TemplateBox[{"\"iodine\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Iodine\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Iodine\\\"]\"", 
                    "\"playplus\""},
                    "Entity"], ",", " ", 
                   TemplateBox[{"\"phosphorus\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Phosphorus\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Phosphorus\\\"]\"", 
                    "\"playplus\""},
                    "Entity"]}], "}"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"{", 
                  RowBox[{
                   TemplateBox[{"\"nitrogen\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Nitrogen\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Nitrogen\\\"]\"", 
                    "\"playplus\""},
                    "Entity"], ",", " ", 
                   TemplateBox[{"\"iodine\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Iodine\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Iodine\\\"]\"", 
                    "\"playplus\""},
                    "Entity"], ",", " ", 
                   TemplateBox[{"\"phosphorus\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Phosphorus\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Phosphorus\\\"]\"", 
                    "\"playplus\""},
                    "Entity"]}], "}"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"{", 
                    RowBox[{
                    TemplateBox[{"\"nitrogen\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Nitrogen\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Nitrogen\\\"]\"", 
                    "\"playplus\""}, "Entity"], ",", " ", 
                    TemplateBox[{"\"iodine\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Iodine\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Iodine\\\"]\"", 
                    "\"playplus\""}, "Entity"], ",", " ", 
                    TemplateBox[{"\"phosphorus\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Phosphorus\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Phosphorus\\\"]\"", 
                    "\"playplus\""}, "Entity"]}], "}"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            Appearanceplaypluss->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
           "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], "MouseExited" :> 
        FEPrivate`Set[Typeset`show$$, False], Method -> "Preemptive", 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = 
         True}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ButtonBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\"\[RightGuillemet]\"",
                   StripOnInput->False,
                   LineColor->RGBColor[1, 0.5, 0],
                   FrontFaceColor->RGBColor[1, 0.5, 0],
                   BackFaceColor->RGBColor[1, 0.5, 0],
                   GraphicsColor->RGBColor[1, 0.5, 0],
                   FontColor->RGBColor[1, 0.5, 0]],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"], StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
                Appearance->None,
                BaselinePosition->Baseline,
                ButtonFunction:>(Quiet[
                   WolframAlpha[]]; Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse["N, I, P", 
                   Defer[{
                    Entity["playplus", "Nitrogen"], 
                    Entity["playplus", "Iodine"], 
                    Entity["playplus", "Phosphorus"]}], "Fast parse"]; 
                 Typeset`open$$ = False),
                ContentPadding->False,
                Evaluator->Automatic,
                Method->"Queued"], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  Typeset`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse["N, I, P", 
                    Defer[{
                    Entity["playplus", "Nitrogen"], 
                    Entity["playplus", "Iodine"], 
                    Entity["playplus", "Phosphorus"]}], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"{", 
                    RowBox[{
                    TemplateBox[{"\"nitrogen\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Nitrogen\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Nitrogen\\\"]\"", 
                    "\"playplus\""},
                    "Entity"], ",", " ", 
                    TemplateBox[{"\"iodine\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Iodine\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Iodine\\\"]\"", 
                    "\"playplus\""},
                    "Entity"], ",", " ", 
                    TemplateBox[{"\"phosphorus\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Phosphorus\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Phosphorus\\\"]\"", 
                    "\"playplus\""},
                    "Entity"]}], "}"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"{", 
                    RowBox[{
                    TemplateBox[{"\"nitrogen\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Nitrogen\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Nitrogen\\\"]\"", 
                    "\"playplus\""},
                    "Entity"], ",", " ", 
                    TemplateBox[{"\"iodine\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Iodine\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Iodine\\\"]\"", 
                    "\"playplus\""},
                    "Entity"], ",", " ", 
                    TemplateBox[{"\"phosphorus\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Phosphorus\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Phosphorus\\\"]\"", 
                    "\"playplus\""},
                    "Entity"]}], "}"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"{", 
                    RowBox[{
                    TemplateBox[{"\"nitrogen\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Nitrogen\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Nitrogen\\\"]\"", 
                    "\"playplus\""}, "Entity"], ",", " ", 
                    TemplateBox[{"\"iodine\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Iodine\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Iodine\\\"]\"", 
                    "\"playplus\""}, "Entity"], ",", " ", 
                    TemplateBox[{"\"phosphorus\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"playplus\"", ",", "\"Phosphorus\""}], "]"}], 
                    "\"Entity[\\\"playplus\\\", \\\"Phosphorus\\\"]\"", 
                    "\"playplus\""}, "Entity"]}], "}"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                Appearanceplaypluss->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
               "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], 
            "MouseExited" :> FEPrivate`Set[Typeset`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[56]:=",ExpressionUUID->"4e074b30-8ea2-4c14-9a4e-efbd8f0aeb86"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"\"nitrogen\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"playplus\"", ",", "\"Nitrogen\""}], "]"}], 
     "\"Entity[\\\"playplus\\\", \\\"Nitrogen\\\"]\"", "\"playplus\""},
    "Entity"], ",", 
   TemplateBox[{"\"iodine\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"playplus\"", ",", "\"Iodine\""}], "]"}], 
     "\"Entity[\\\"playplus\\\", \\\"Iodine\\\"]\"", "\"playplus\""},
    "Entity"], ",", 
   TemplateBox[{"\"phosphorus\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"playplus\"", ",", "\"Phosphorus\""}], "]"}], 
     "\"Entity[\\\"playplus\\\", \\\"Phosphorus\\\"]\"", "\"playplus\""},
    "Entity"]}], "}"}]], "Output",
 CellChangeTimes->{3.957899456709998*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"67810af0-dbe9-4c30-b456-d733307332bf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sum[Log[k^2 + 5^k + 6], k]", "WolframAlphaLong",
 CellChangeTimes->{{3.957897409174584*^9, 3.957897427771941*^9}, {
  3.95789746584606*^9, 3.957897487209589*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"c2ed665c-8568-4464-b15a-ad165c798b1f"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Sum[Log[k^2 + 5^k + 6], k]", 
   Typeset`opts$$ = {
   Appearanceplaypluss -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`playpluss$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLplayplus[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Sum", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLplayplus["subpod", {"title" -> ""}, {
       XMLplayplus["minput", {}, {"Sum[Log[k^2 + 5^k + 6], {k}]"}], 
       XMLplayplus["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              PaneBox[
               RowBox[{
                 UnderoverscriptBox["\[Sum]", 
                  RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                 RowBox[{"log", "(", 
                   RowBox[{
                    SuperscriptBox["k", "2"], "+", 
                    SuperscriptBox["5", "k"], "+", "6"}], ")"}]}], 
               BaseStyle -> {ScriptLevel -> 0}], HoldForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLplayplus["dataformats", {}, {"plaintext,minput"}]}], 
     XMLplayplus["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLplayplus["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLplayplus["infos", {"count" -> "1"}, {
       XMLplayplus["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLplayplus[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLplayplus[
         "link", {
          "url" -> "http://functions.wolfram.com/playplusaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         
         XMLplayplus[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod2$$ = XMLplayplus[
   "pod", {"title" -> "Infinite sum", "scanner" -> "Sum", "id" -> "Input", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLplayplus["subpod", {"title" -> ""}, {
       XMLplayplus["minput", {}, {"SumConvergence[Log[6 + 5^k + k^2], k]"}], 
       XMLplayplus["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              TagBox[
               TagBox[
                PaneBox[
                 RowBox[{
                   UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                   RowBox[{"log", "(", 
                    RowBox[{"6", "+", 
                    SuperscriptBox["5", "k"], "+", 
                    SuperscriptBox["k", "2"]}], ")"}]}], 
                 BaseStyle -> {ScriptLevel -> 0}], HoldForm], 
               PolynomialForm[#, TraditionalOrder -> False]& ], 
              TemplateBox[{6}, "Spacer1"], "\"diverges\""}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLplayplus[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLplayplus["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLplayplus["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLplayplus["states", {"count" -> "2"}, {
       XMLplayplus[
       "state", {"name" -> "Show tests", "input" -> "Input__Show tests"}, {}], 
       XMLplayplus[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Input__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod3$$ = 
   XMLplayplus[
   "pod", {"title" -> "Partial sums", "scanner" -> "Sum", "id" -> 
     "PartialSums", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLplayplus["subpod", {"title" -> ""}, {
       XMLplayplus[
       "minput", {}, {
        "ListLinePlot[Accumulate[Table[Log[6 + 5^n + n^2], {n, 0, 5}]]]"}], 
       XMLplayplus["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{}, {{{}, {}, {
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  AbsoluteThickness[1.5]], 
                 
                 LineBox[{{0., 1.9459101490553132`}, {1., 
                  4.430816798843313}, {2., 7.986164860332726}, {
                  3.0000000000000004`, 12.92780728294203}, {4., 
                  19.40015357744293}, {5., 27.457214259408694`}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  AbsoluteThickness[1.5]], 
                 GeometricTransformationBox[
                  InsetBox[
                   BoxData[
                    FormBox[
                    StyleBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    DiskBox[{0, 0}]}, TicksStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.5]]}, StripOnInput -> False], 
                    TraditionalForm]], {0., 0.}, Automatic, 
                   NCache[
                    Offset[
                    Rational[50, 7]], 
                    Offset[7.142857142857143]]], {{{0., 
                  1.9459101490553132`}}, {{1., 4.430816798843313}}, {{2., 
                  7.986164860332726}}, {{3.0000000000000004`, 
                  12.92780728294203}}, {{4., 19.40015357744293}}, {{5., 
                  27.457214259408694`}}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  AbsoluteThickness[1.5]]}, {}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  AbsoluteThickness[1.5]]}, {}}}, {{}, {}}}, {
              AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {True, True}, AxesLabel -> {
                FormBox[
                 StyleBox["n", {
                   GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                   LineIndent -> 0}], TraditionalForm], 
                FormBox[
                 StyleBox[
                  SubscriptBox["\"S\"", "n"], {
                   GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                   LineIndent -> 0}], TraditionalForm]}, 
              AxesOrigin -> {0., 0.}, AxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1], BaseStyle -> Automatic, DisplayFunction :> Identity, 
              Frame -> {{False, False}, {False, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1], FrameTicks -> {{Automatic, Automatic}, {
                Automatic, Automatic}}, FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], 
              GridLines -> {None, None}, GridLinesStyle -> {
                GrayLevel[0.85], 
                GrayLevel[0.85]}, ImageSize -> 220., 
              LabelStyle -> {FontSize -> 10, FontFamily -> "Roboto"}, 
              Method -> {
               "OptimizePlotMarkers" -> True, 
                "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
              PlotRange -> {{0., 5.}, {0., 27.457214259408694`}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.05]}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              Ticks -> {Automatic, Automatic}, TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}, TicksStyle -> 
             Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1]], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLplayplus[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLplayplus["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLplayplus["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLplayplus["states", {"count" -> "2"}, {
       XMLplayplus[
       "state", {
        "name" -> "More terms", "input" -> "PartialSums__More terms"}, {}], 
       XMLplayplus[
       "state", {
        "name" -> "Show points", "input" -> 
         "PartialSums__Show points"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLplayplus["assumptions", {"count" -> "1"}, {
      XMLplayplus[
      "assumption", {
       "type" -> "Function", "word" -> "Log", "template" -> 
        "Assuming \"Log\" is the natural logarithm${separator}Use ${desc} \
instead", "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"FunClash\", \"Log\"} -> {\"Log\", \"dflt\"}"}, {
        XMLplayplus[
        "value", {
         "name" -> "Log", "desc" -> "the natural logarithm", "input" -> 
          "{\"FunClash\", \"Log\"} -> {\"Log\"}"}, {}], 
        XMLplayplus[
        "value", {
         "name" -> "Log10", "desc" -> "the base 10 logarithm", "input" -> 
          "{\"FunClash\", \"Log\"} -> {\"Log10\"}"}, {}]}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "Sum", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.391", "parsetiming" -> "0.386", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP188015053872681f400400003fe4351b893ad7h0", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "11", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa188115053872681f40040000345b553fg65ag6325481992349747128482", "version" -> 
    "2.6", "inputstring" -> "Sum[Log[k^2 + 5^k + 6], k]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -3., 
    "Date" -> {2025, 6, 2, 21, 31, 19.56586`8.044073925662138}, "Line" -> 57, 
    "SessionID" -> 23739368349936432705}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Sum[Log[k^2 + 5^k + 6], k]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`playpluss$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{409.25, {251.6230269797482, 256.9199019797482}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.957899479598917*^9},ExpressionUUID->"ac1e86e2-45d3-4d7d-8a88-\
44f372e8d8bb"]
}, Open  ]],

Cell["Sum[Log[k^2 + 5^k + 6], k]", "ChatInput",
 CellDingbat->Cell[
   BoxData[
    DynamicBox[
     ToBoxes[
      If[
       TrueQ[CloudSystem`$CloudNotebooks], 
       RawBoxes[
        TemplateBox[{}, "ChatIconUser"]], 
       RawBoxes[
        TemplateBox[{}, "ChatInputCellDingbat"]]], StandardForm]]], 
   Background -> None, CellFrame -> 0, CellMargins -> 0],
 CellChangeTimes->{3.957897605539661*^9},
 CellLabel->"In[46]:=",ExpressionUUID->"54d5677b-3a2e-400f-b7eb-6b8ec72fbba6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{"Log", "[", 
    RowBox[{
     RowBox[{"k", "^", "2"}], " ", "+", " ", 
     RowBox[{"5", "^", "k"}], " ", "+", " ", "6"}], "]"}], ",", " ", 
   RowBox[{"k", " ", ">", " ", "0"}]}], "]"}]], "Input",ExpressionUUID->\
"ed81ede5-ec71-4658-b6a2-317d69302825"],

Cell[BoxData[
 TemplateBox[{
  "Sum", "vloc", 
   "\"The variable \\!\\(\\*RowBox[{\\\"k\\\", \\\">\\\", \\\"0\\\"}]\\) \
cannot be localized so that it can be assigned to numerical values.\"", 2, 58,
    9, 23739368349936432705, "Local"},
  "MessageTemplate",
  BaseStyle->"MSG"]], "Message",
 CellChangeTimes->{3.957899486301896*^9},
 CellLabel->
  "During evaluation of \
In[58]:=",ExpressionUUID->"c6bc2d66-2c9c-4716-b153-a87ae638dba7"],

Cell[BoxData[
 RowBox[{
  UnderscriptBox["\[Sum]", 
   RowBox[{"k", ">", "0"}]], 
  RowBox[{"Log", "[", 
   RowBox[{
    SuperscriptBox["k", "2"], "+", 
    SuperscriptBox["5", "k"], "+", "6"}], "]"}]}]], "Output",
 CellChangeTimes->{3.9578994863076487`*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"c099f88e-7dc4-42ca-91c7-f7a425fdb716"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{"x", "^", "n"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"n", ",", " ", "0", ",", " ", "Infinity"}], "}"}], ",", " ", 
   RowBox[{"GenerateConditions", "->", " ", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.957898668029974*^9, 3.9578987355656033`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"959ed83d-c0fb-43ca-b216-e3e1c321e770"],

Cell[BoxData[
 TemplateBox[{
   FractionBox["1", 
    RowBox[{"1", "-", "x"}]], 
   RowBox[{
     RowBox[{"Abs", "[", "x", "]"}], "<", "1"}]},
  "ConditionalExpression"]], "Output",
 CellChangeTimes->{3.957899493463512*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"be65e152-7d15-418f-a57d-021e2afc8c5d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   RowBox[{"1", " ", "/", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"k", " ", "+", " ", "a"}], ")"}], "^", " ", "2"}]}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"k", ",", " ", "0", ",", " ", "Infinity"}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"GenerateConditions", "->", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9578987838442583`*^9, 3.9578988347443123`*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"f5524669-e219-4252-9d1a-dfa3f8a8201c"],

Cell[BoxData[
 TemplateBox[{
   RowBox[{"PolyGamma", "[", 
     RowBox[{"1", ",", "a"}], "]"}], 
   RowBox[{
     RowBox[{"a", "[Notplayplus]", 
       TemplateBox[{}, "Integers"]}], "||", 
     RowBox[{
       RowBox[{"Im", "[", "a", "]"}], "\[NotEqual]", "0"}], "||", 
     RowBox[{"a", ">", "0"}]}]},
  "ConditionalExpression"]], "Output",
 CellChangeTimes->{3.957899496366152*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"837de4de-6816-4231-990f-d0f7713d81c8"]
}, Open  ]],

Cell[BoxData[""], "WolframAlphaShortInput",
 CellChangeTimes->{{3.9578993425066137`*^9, 
  3.9578993428112383`*^9}},ExpressionUUID->"56773d53-1b22-4c63-956d-\
3731c88183dc"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.957897589320421*^9, 
  3.957897597550604*^9}},ExpressionUUID->"afd11205-e54a-4ca0-aeb7-\
3e01f6ac0ac0"]
},
WindowSize->{476.25, 239.25},
WindowMargins->{{6, Automatic}, {Automatic, 6}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"14.2 for Linux x86 (64-bit) (March 16, 2025)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6526137c-6fac-4af0-97f7-04eb08d17f44"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 414, 13, 47, "Input",ExpressionUUID->"83cc8480-c25d-443a-a4a7-1dbb0fc6600d"],
Cell[993, 37, 197, 4, 48, "Output",ExpressionUUID->"a4782ba2-1b9d-497e-a3b4-7ee6d08c2832"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1227, 46, 21389, 493, 124, "WolframAlphaShortInput",ExpressionUUID->"4e074b30-8ea2-4c14-9a4e-efbd8f0aeb86"],
Cell[22619, 541, 816, 19, 40, "Output",ExpressionUUID->"67810af0-dbe9-4c30-b456-d733307332bf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23472, 565, 247, 3, 38, "WolframAlphaLong",ExpressionUUID->"c2ed665c-8568-4464-b15a-ad165c798b1f"],
Cell[23722, 570, 16665, 338, 516, "Print",ExpressionUUID->"ac1e86e2-45d3-4d7d-8a88-44f372e8d8bb"]
}, Open  ]],
Cell[40402, 911, 488, 13, 54, "ChatInput",ExpressionUUID->"54d5677b-3a2e-400f-b7eb-6b8ec72fbba6"],
Cell[CellGroupData[{
Cell[40915, 928, 313, 8, 47, "Input",ExpressionUUID->"ed81ede5-ec71-4658-b6a2-317d69302825"],
Cell[41231, 938, 440, 11, 42, "Message",ExpressionUUID->"c6bc2d66-2c9c-4716-b153-a87ae638dba7"],
Cell[41674, 951, 337, 9, 47, "Output",ExpressionUUID->"c099f88e-7dc4-42ca-91c7-f7a425fdb716"]
}, Open  ]],
Cell[CellGroupData[{
Cell[42048, 965, 396, 8, 89, "Input",ExpressionUUID->"959ed83d-c0fb-43ca-b216-e3e1c321e770"],
Cell[42447, 975, 302, 8, 54, "Output",ExpressionUUID->"be65e152-7d15-418f-a57d-021e2afc8c5d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[42786, 988, 518, 12, 89, "Input",ExpressionUUID->"f5524669-e219-4252-9d1a-dfa3f8a8201c"],
Cell[43307, 1002, 463, 12, 42, "Output",ExpressionUUID->"837de4de-6816-4231-990f-d0f7713d81c8"]
}, Open  ]],
Cell[43785, 1017, 173, 3, 30, "WolframAlphaShortInput",ExpressionUUID->"56773d53-1b22-4c63-956d-3731c88183dc"],
Cell[43961, 1022, 152, 3, 29, "Input",ExpressionUUID->"afd11205-e54a-4ca0-aeb7-3e01f6ac0ac0"]
}
]
*)

(* End of internal cache information *)

